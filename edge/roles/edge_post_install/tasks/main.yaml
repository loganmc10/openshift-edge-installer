- name: Post install tasks
  block:
    - name: Get kubeconfig
      # grab the kubeconfig early in order to assist in troubleshooting
      ansible.builtin.include_tasks: kubeconfig.yaml

    - name: Wait for install to complete
      kubernetes.core.k8s_info:
        api_version: extensions.hive.openshift.io/v1beta1
        kind: AgentClusterInstall
        name: "{{ metadata.name }}"
        namespace: "{{ metadata.name }}"
        wait: true
        wait_condition:
          type: Completed
          status: "True"
        wait_sleep: 60
        wait_timeout: 14400

    - name: Update kubeconfig
      # during the install, the kubeconfig is modified to included additional CAs, here we update the kubeconfig to include those
      ansible.builtin.include_tasks: kubeconfig.yaml

    - name: Set required environment vars
      ansible.builtin.set_fact:
        kubeconfig_env_vars:
          KUBECONFIG: "{{ kubeconfig_file.dest }}"

    # in a multi-node relocatable cluster, the API needs to be exposed using MetalLB
    # before MetalLB is installed, we access the cluster by connecting directly to a control plane node
    - name: Set up access to relocatable cluster
      when: (controlPlane.replicas == 3) and (edgeCluster.relocatable is defined)
      block:
        - name: Set fact for multinode relocatable cluster
          ansible.builtin.set_fact:
            access_control_node: true

        - name: Get BareMetalHosts
          kubernetes.core.k8s_info:
            api_version: metal3.io/v1alpha1
            kind: BareMetalHost
            namespace: "{{ metadata.name }}"
          register: bmh_list
          until: bmh_list is not failed

        - name: Find control plane node
          loop: "{{ bmh_list.resources }}"
          loop_control:
            label: "{{ item.metadata.name }}"
          when: item.metadata.annotations['bmac.agent-install.openshift.io/role'] == "master"
          ansible.builtin.set_fact:
            control_plane_node: "{{ item }}"

        - name: Find IPv4 for first control plane node
          loop: "{{ control_plane_node.status.hardware.nics }}"
          loop_control:
            label: "{{ item.ip | default(item.name) }}"
          when: >
            (item.ip is defined) and
            (item.ip | ansible.utils.ipv4) and
            (not (relocatable_ipv4_subnet | ansible.utils.network_in_usable(item.ip)))
          ansible.builtin.set_fact:
            node_ip: "{{ item.ip }}"

        - name: Find IPv6 for first control plane node
          loop: "{{ control_plane_node.status.hardware.nics }}"
          loop_control:
            label: "{{ item.ip | default(item.name) }}"
          when: >
            (node_ip is not defined) and
            (item.ip is defined) and
            (item.ip | ansible.utils.ipv6) and
            (not (relocatable_ipv6_subnet | ansible.utils.network_in_usable(item.ip)))
          ansible.builtin.set_fact:
            node_ip: "{{ item.ip }}"

        - name: Add required environment vars
          ansible.builtin.set_fact:
            kubeconfig_env_vars: "{{ kubeconfig_env_vars | combine({'K8S_AUTH_HOST': 'https://' + node_ip + ':6443', 'K8S_AUTH_VERIFY_SSL': 'false'}) }}"

    - name: Run tasks on edge cluster
      environment: "{{ kubeconfig_env_vars }}"
      block:
        # applied during post-install because it doesn't seem to work as an install-time manifest
        # routingViaHost is required for relocatable clusters
        - name: Configure routingViaHost
          when: (edgeCluster.routingViaHost is defined and edgeCluster.routingViaHost) or (edgeCluster.relocatable is defined)
          ansible.builtin.include_tasks: routing_via_host.yaml

        - name: Apply post-install manifests
          when: edgeCluster.postInstallManifestsFolder is defined
          loop: "{{ lookup('ansible.builtin.fileglob', lookup('ansible.builtin.vars', 'post_install_manifests_folder') + '/*', wantlist=True) | sort }}"
          loop_control:
            pause: 15
            label: "{{ item }}"
          kubernetes.core.k8s:
            src: "{{ item }}"
            wait: true
            apply: true
            state: present
          vars:
            # this var is copied in like this because ansible.builtin.vars doesn't support dicts
            post_install_manifests_folder: "{{ edgeCluster.postInstallManifestsFolder }}"
          register: k8s_result
          until: k8s_result is not failed

        - name: Run post-install scripts
          when: edgeCluster.postInstallScriptsFolder is defined
          loop: "{{ lookup('ansible.builtin.fileglob', lookup('ansible.builtin.vars', 'post_install_scripts_folder') + '/*', wantlist=True) | sort }}"
          loop_control:
            label: "{{ item }}"
          ansible.builtin.include_tasks: post_scripts.yaml
          vars:
            # this var is copied in like this because ansible.builtin.vars doesn't support dicts
            post_install_scripts_folder: "{{ edgeCluster.postInstallScriptsFolder }}"

        - name: Setup MetalLB for relocatable cluster
          when: access_control_node
          ansible.builtin.include_tasks: metallb.yaml

        - name: Install Storage and Registry
          when: (edgeCluster.odfStorage is defined) and (edgeCluster.odfStorage.enabled)
          block:
            - name: Install ODF # noqa role-name[path]
              ansible.builtin.include_role:
                name: "{{ playbook_dir }}/../common/roles/storage"
              vars:
                catalog_source: "{{ edgeCluster.odfStorage.catalogSource | default('redhat-operators') }}"

            - name: Install Image Registry
              when: (edgeCluster.odfStorage.imageRegistry is defined) and (edgeCluster.odfStorage.imageRegistry)
              ansible.builtin.include_tasks: registry.yaml

        - name: Prepare to apply MachineConfigs
          when: (edgeCluster.performanceProfileSpec is defined) or (edgeCluster.autoApproveCSRs is defined and edgeCluster.autoApproveCSRs)
          block:
            - name: Get MachineConfigPools
              kubernetes.core.k8s_info:
                api_version: machineconfiguration.openshift.io/v1
                kind: MachineConfigPool
              register: machine_config_pools
              until: machine_config_pools is not failed

            - name: Pause MCPs
              loop: "{{ machine_config_pools.resources }}"
              loop_control:
                label: "{{ item.metadata.name }}"
              kubernetes.core.k8s:
                definition:
                  apiVersion: machineconfiguration.openshift.io/v1
                  kind: MachineConfigPool
                  metadata:
                    name: "{{ item.metadata.name }}"
                  spec:
                    paused: true
                state: present
              register: k8s_result
              until: k8s_result is not failed

        # since 4.11, this can be applied as an install manifest, but that doesn't seem to work reliably
        - name: Apply PerformanceProfile
          when: edgeCluster.performanceProfileSpec is defined
          loop: "{{ edgeCluster.performanceProfileSpec | dict2items }}"
          loop_control:
            label: "{{ item.key }}"
          kubernetes.core.k8s:
            template: PerformanceProfile.yaml.j2
            apply: true
            state: present
            wait: true
            wait_condition:
              type: Available
              status: "True"
            wait_timeout: 1200
          register: k8s_result
          until: k8s_result is not failed

        - name: Auto approve CSRs
          when: (edgeCluster.autoApproveCSRs is defined) and (edgeCluster.autoApproveCSRs)
          ansible.builtin.include_role:
            name: "edge_csr_approver"

        - name: Finish applying MachineConfigs
          when: (edgeCluster.performanceProfileSpec is defined) or (edgeCluster.autoApproveCSRs is defined and edgeCluster.autoApproveCSRs)
          block:
            - name: Pause for 30 seconds to let MachineConfigPools settle
              ansible.builtin.pause:
                seconds: 30

            - name: Unpause MCPs
              loop: "{{ machine_config_pools.resources }}"
              loop_control:
                label: "{{ item.metadata.name }}"
              kubernetes.core.k8s:
                definition:
                  apiVersion: machineconfiguration.openshift.io/v1
                  kind: MachineConfigPool
                  metadata:
                    name: "{{ item.metadata.name }}"
                  spec:
                    paused: false
                state: present
              register: k8s_result
              until: k8s_result is not failed
  always:
    - name: Remove Edge Cluster Namespace
      when: ((edgeCluster.keepNamespace is defined) and (not edgeCluster.keepNamespace)) or (edgeCluster.keepNamespace is not defined)
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ metadata.name }}"
        state: absent
        wait: true
        wait_timeout: 1200
