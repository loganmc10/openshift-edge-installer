- name: Calculate relocatable IP
  when: edgeCluster.relocatable is defined
  block:
    - name: Increment relocatable IP address
      ansible.builtin.set_fact:
        interface_number: "{{ (interface_number | int) + 1 }}"

    - name: Filter the relocatable interface
      ansible.builtin.set_fact:
        filtered_interface: "{{ nmstate_host.networkConfig.interfaces | json_query('[?name == `' + edgeCluster.relocatable.interface + '`]') | first }}"

    - name: Create entry for IPv4 address list
      when: cluster_ipv4
      block:
        - name: Get IPv4 addresses
          ansible.builtin.set_fact:
            ipv4_addresses: "{{ filtered_interface.ipv4.address | default([]) }}"

        - name: Append IPv4 relocatable address
          ansible.builtin.set_fact:
            ipv4_addresses: "{{ ipv4_addresses + [{'ip': relocatable_ipv4_subnet | ansible.utils.nthhost(interface_number | int), 'prefix-length': relocatable_ipv4_subnet | ansible.utils.ipaddr('prefix')}] }}"

        - name: Update IPv4 addresses
          ansible.builtin.set_fact:
            filtered_interface: "{{ filtered_interface | combine({'ipv4': {'address': ipv4_addresses}}, recursive=true) }}"

    - name: Create entry for IPv6 address list
      when: cluster_ipv6
      block:
        - name: Get IPv6 addresses
          ansible.builtin.set_fact:
            ipv6_addresses: "{{ filtered_interface.ipv6.address | default([]) }}"

        - name: Append IPv6 relocatable address
          ansible.builtin.set_fact:
            ipv6_addresses: "{{ ipv6_addresses + [{'ip': relocatable_ipv6_subnet | ansible.utils.nthhost(interface_number | int), 'prefix-length': relocatable_ipv6_subnet | ansible.utils.ipaddr('prefix')}] }}"

        - name: Update IPv6 addresses
          ansible.builtin.set_fact:
            filtered_interface: "{{ filtered_interface | combine({'ipv6': {'address': ipv6_addresses}}, recursive=true) }}"

    - name: Get all non-reloctable interfaces
      ansible.builtin.set_fact:
        interfaces_list: "{{ nmstate_host.networkConfig.interfaces | json_query('[?name != `' + edgeCluster.relocatable.interface + '`]') }}"

    - name: Add reloctable interface
      ansible.builtin.set_fact:
        interfaces_list: "{{ interfaces_list + [filtered_interface] }}"

    - name: Create new networkConfig
      ansible.builtin.set_fact:
        relocatable_network_config: "{{ nmstate_host.networkConfig | combine({'interfaces': interfaces_list}, recursive=true) }}"

    - name: Add DNS config
      when: controlPlane.replicas == 3
      block:
        - name: Get current DNS config
          ansible.builtin.set_fact:
            dns_servers: "{{ nmstate_host.networkConfig['dns-resolver'].config.server | default([]) }}"

        - name: Append relocatable IPv4 DNS server
          when: cluster_ipv4
          ansible.builtin.set_fact:
            dns_servers: "{{ dns_servers + [relocatable_ipv4_subnet | ansible.utils.nthhost(2)] }}"

        - name: Append relocatable IPv6 DNS server
          when: cluster_ipv6
          ansible.builtin.set_fact:
            dns_servers: "{{ dns_servers + [relocatable_ipv6_subnet | ansible.utils.nthhost(2)] }}"

        - name: Update DNS config
          ansible.builtin.set_fact:
            relocatable_network_config: "{{ relocatable_network_config | combine({'dns-resolver': {'config': {'server': dns_servers}}}, recursive=true) }}"

- name: Create NMStateConfig
  kubernetes.core.k8s:
    template: NMStateConfig.yaml.j2
    apply: true
    state: present
  register: k8s_result
  until: k8s_result is not failed
