- name: Create NMStateConfig
  kubernetes.core.k8s:
    template: NMStateConfig.yaml.j2
    apply: true
    state: present

- name: Configure relocatable networking
  when: (controlPlane.replicas == 1) and (edgeCluster.relocatable is defined)
  block:
    - name: Get relocatable interface index
      loop: "{{ nmstate_host.networkConfig.interfaces }}"
      loop_control:
        index_var: interface_index
      when: item.name == edgeCluster.relocatable
      ansible.builtin.set_fact:
        relocatableInterface: "{{ interface_index }}"

    - name: Patch NMStateConfig with relocatable IPv4
      when: nmstate_host.networkConfig.interfaces[relocatableInterface].ipv4.enabled
      kubernetes.core.k8s_json_patch:
        api_version: agent-install.openshift.io/v1beta1
        kind: NMStateConfig
        name: "{{ nmstate_host.name }}"
        namespace: "{{ metadata.name }}"
        patch:
          - op: add
            path: /spec/config/interfaces/{{ relocatableInterface | int }}/ipv4/address/-
            value:
              { "ip": "192.168.7.{{ (idx + 2) | int }}", "prefix-length": 24 }

    - name: Patch NMStateConfig with relocatable IPv6
      when: nmstate_host.networkConfig.interfaces[relocatableInterface].ipv6.enabled
      kubernetes.core.k8s_json_patch:
        api_version: agent-install.openshift.io/v1beta1
        kind: NMStateConfig
        name: "{{ nmstate_host.name }}"
        namespace: "{{ metadata.name }}"
        patch:
          - op: add
            path: /spec/config/interfaces/{{ relocatableInterface | int }}/ipv6/address/-
            value: { "ip": "fd04::{{ (idx + 2) | int }}", "prefix-length": 64 }

    - name: Check for IPv4
      loop: "{{ networking.serviceNetwork }}"
      when: item | ansible.utils.ipv4
      ansible.builtin.set_fact:
        cluster_ipv4: true

    - name: Create relocatable IPv4 machineNetwork
      when: cluster_ipv4 is defined
      ansible.builtin.set_fact:
        relocatableMachineNetwork: "{{ [{'cidr': '192.168.7.0/24'}] }}"

    - name: Check for IPv6
      loop: "{{ networking.serviceNetwork }}"
      when: item | ansible.utils.ipv6
      ansible.builtin.set_fact:
        cluster_ipv6: true

    - name: Create relocatable IPv6 machineNetwork
      when: cluster_ipv6 is defined
      ansible.builtin.set_fact:
        relocatableMachineNetwork: "{{ relocatableMachineNetwork|default([]) + [{'cidr': 'fd04::/64'}] }}"

    - name: Set machineNetwork for relocatable cluster
      ansible.builtin.set_fact:
        relocatableNetworking: "{{ networking | combine(newNetwork, recursive=true) }}"
      vars:
        newNetwork:
          machineNetwork: "{{ relocatableMachineNetwork }}"
