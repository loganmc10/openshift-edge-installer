- name: Install edge cluster
  block:
    # defines which OpenShift version is going to be installed on the edge cluster
    - name: Create ClusterImageSet
      kubernetes.core.k8s:
        definition:
          apiVersion: hive.openshift.io/v1
          kind: ClusterImageSet
          metadata:
            name: "{{ metadata.name }}"
          spec:
            releaseImage: "{{ edgeCluster.clusterImageSet }}"
        apply: true
        state: present

    - name: Create Namespace
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ metadata.name }}"
        apply: true
        state: present

    - name: Create BMC secrets
      loop: "{{ platform.baremetal.hosts }}"
      loop_control:
        label: "{{ item.name }}"
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          data:
            password: "{{ item.bmc.password | b64encode }}"
            username: "{{ item.bmc.username | b64encode }}"
          metadata:
            name: "{{ item.name }}-bmc-secret"
            namespace: "{{ metadata.name }}"
          type: Opaque
        apply: true
        state: present

    - name: Create image pull secret
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          data:
            .dockerconfigjson: "{{ pullSecret | b64encode }}"
          metadata:
            name: assisted-deployment-pull-secret
            namespace: "{{ metadata.name }}"
          type: kubernetes.io/dockerconfigjson
        apply: true
        state: present

    # these manifests are applied early in the install process, often they are MachineConfigs, applying them early helps avoid extra reboots
    - name: Create user-defined manifest config maps
      when: edgeCluster.installManifestsFolder is defined
      loop: "{{ lookup('ansible.builtin.fileglob', lookup('ansible.builtin.vars', 'install_manifests_folder') + '/*', wantlist=True) | sort }}"
      loop_control:
        index_var: idx
        label: "{{ item }}"
      kubernetes.core.k8s:
        template: ConfigMap.yaml.j2
        apply: true
        state: present
      vars:
        # this var is copied in like this because ansible.builtin.vars doesn't support dicts
        install_manifests_folder: "{{ edgeCluster.installManifestsFolder }}"

    - name: Count workers
      loop: "{{ compute }}"
      loop_control:
        label: "{{ item.name }}"
      ansible.builtin.set_fact:
        worker_count: "{{ (worker_count | int) + item.replicas }}"

    - name: Setup workload partitioning
      when: (edgeCluster.performanceProfileSpec is defined) and (controlPlane.replicas == 1)
      ansible.builtin.include_tasks: workload_partitioning.yaml

    - name: Check for IPv4
      loop: "{{ networking.serviceNetwork }}"
      when: item | ansible.utils.ipv4
      ansible.builtin.set_fact:
        cluster_ipv4: true

    - name: Check for IPv6
      loop: "{{ networking.serviceNetwork }}"
      when: item | ansible.utils.ipv6
      ansible.builtin.set_fact:
        cluster_ipv6: true

    # on a multi-node cluster this is determined based on the API and Ingress VIPs
    - name: Setup relocatable machine network
      when: (controlPlane.replicas == 1) and (edgeCluster.relocatable is defined)
      ansible.builtin.include_tasks: setup_machine_network.yaml

    - name: Setup host networking
      when: nmstate_host.networkConfig is defined
      loop: "{{ platform.baremetal.hosts }}"
      loop_control:
        label: "{{ nmstate_host.name }}"
        loop_var: nmstate_host
      ansible.builtin.include_tasks: setup_host_networking.yaml

    - name: Create manifest config maps
      kubernetes.core.k8s:
        template: AgentConfigMap.yaml.j2
        apply: true
        state: present

    - name: Create AgentClusterInstall
      kubernetes.core.k8s:
        template: AgentClusterInstall.yaml.j2
        apply: true
        state: present
      vars:
        install_manifests_folder: "{{ edgeCluster.installManifestsFolder }}"

    - name: Create ClusterDeployment
      kubernetes.core.k8s:
        template: ClusterDeployment.yaml.j2
        apply: true
        state: present

    - name: Create InfraEnv
      kubernetes.core.k8s:
        template: InfraEnv.yaml.j2
        apply: true
        state: present

    - name: Create BareMetalHosts
      loop: "{{ platform.baremetal.hosts }}"
      loop_control:
        label: "{{ item.name }}"
      kubernetes.core.k8s:
        template: BareMetalHost.yaml.j2
        apply: true
        state: present
      register: create_bmh

    - name: Wait for BareMetalHosts to provision
      kubernetes.core.k8s_info:
        api_version: metal3.io/v1alpha1
        kind: BareMetalHost
        namespace: "{{ metadata.name }}"
      register: bmh_list
      until: bmh_list | community.general.json_query('resources[*].status.provisioning.state') | unique == ["provisioned"]
      retries: 30
      delay: 20

    - name: Get Events URL
      kubernetes.core.k8s_info:
        api_version: extensions.hive.openshift.io/v1beta1
        kind: AgentClusterInstall
        name: "{{ metadata.name }}"
        namespace: "{{ metadata.name }}"
      register: aci
      until: aci.resources[0].status.debugInfo.eventsURL is defined
      retries: 100
      delay: 10

    # this only needs to be used if the host doesn't support Virtual Media
    - name: Get Discovery ISO URL
      kubernetes.core.k8s_info:
        api_version: agent-install.openshift.io/v1beta1
        kind: InfraEnv
        name: "{{ metadata.name }}"
        namespace: "{{ metadata.name }}"
      register: infraenv
      until: infraenv.resources[0].status.isoDownloadURL is defined
      retries: 100
      delay: 10

    - name: Print Events URL
      ansible.builtin.debug:
        msg: "{{ aci.resources[0].status.debugInfo.eventsURL }}"

    - name: Print Discovery ISO URL
      ansible.builtin.debug:
        msg: "{{ infraenv.resources[0].status.isoDownloadURL }}"
  rescue:
    - name: Delete ClusterImageSet
      kubernetes.core.k8s:
        definition:
          apiVersion: hive.openshift.io/v1
          kind: ClusterImageSet
          metadata:
            name: "{{ metadata.name }}"
        state: absent
        wait: true
        wait_timeout: 1200

    - name: Delete Namespace
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ metadata.name }}"
        state: absent
        wait: true
        wait_timeout: 1200

    - name: End playbook
      ansible.builtin.meta: end_play
