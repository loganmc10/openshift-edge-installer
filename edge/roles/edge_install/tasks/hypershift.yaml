- name: Setup host networking
  when: nmstate_host.networkConfig is defined
  loop: "{{ platform.baremetal.hosts }}"
  loop_control:
    label: "{{ nmstate_host.name }}"
    loop_var: nmstate_host
  ansible.builtin.include_tasks: setup_host_networking.yaml

- name: Setup InfraEnv and BMH
  ansible.builtin.include_tasks: setup_bmh.yaml

- name: Create SSH key secret
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ metadata.name }}-sshkey"
        namespace: "{{ metadata.name }}"
      data:
        id_rsa.pub: "{{ sshKey | b64encode }}"
      type: Opaque
    apply: true
    state: present
  register: k8s_result
  until: k8s_result is not failed

- name: Create additionalTrustBundle CM
  when: additionalTrustBundle is defined
  kubernetes.core.k8s:
    template: TrustedCa.yaml.j2
    apply: true
    state: present
  register: k8s_result
  until: k8s_result is not failed

- name: Populate HostedCluster configuration
  when: edgeCluster.hypershift.configuration is defined
  ansible.builtin.set_fact:
    hypershift_configuration: "{{ edgeCluster.hypershift.configuration }}"

- name: Add proxy to config
  when: proxy is defined
  ansible.builtin.set_fact:
    hypershift_configuration: "{{ hypershift_configuration | combine({'proxy': proxy}, recursive=true) }}"

- name: Create CAPI Role
  kubernetes.core.k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: capi-provider-role
        namespace: "{{ metadata.name }}"
      rules:
        - apiGroups:
            - agent-install.openshift.io
          resources:
            - agents
          verbs:
            - "*"
    apply: true
    state: present
  register: k8s_result
  until: k8s_result is not failed

- name: Create IPAddressPool for API
  kubernetes.core.k8s:
    template: IPAddressPool.yaml.j2
    apply: true
    state: present
  register: k8s_result
  until: k8s_result is not failed
  vars:
    pool_type: "{{ metadata.name }}-api"
    addresses: "{{ platform.baremetal.apiVIPs | default([platform.baremetal.apiVIP]) }}"

- name: Create L2Advertisement
  kubernetes.core.k8s:
    definition:
      apiVersion: metallb.io/v1beta1
      kind: L2Advertisement
      metadata:
        name: "{{ metadata.name }}-api-adv"
        namespace: metallb-system
      spec:
        ipAddressPools:
          - "{{ metadata.name }}-api-address-pool"
    apply: true
    state: present
  register: k8s_result
  until: k8s_result is not failed

- name: Create HostedCluster
  kubernetes.core.k8s:
    template: HostedCluster.yaml.j2
    apply: true
    state: present
  register: k8s_result
  until: k8s_result is not failed

- name: Wait for API Server to be deployed
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    name: kube-apiserver
    namespace: "{{ metadata.name }}-{{ metadata.name }}"
  register: api_server
  until: api_server.resources | length | int == 1
  retries: 60
  delay: 10

- name: Patch API Server
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: kube-apiserver
        namespace: "{{ metadata.name }}-{{ metadata.name }}"
        annotations:
          metallb.universe.tf/address-pool: "{{ metadata.name }}-api-address-pool"
    state: present
  register: k8s_result
  until: k8s_result is not failed

- name: Wait for Agents to come online
  kubernetes.core.k8s_info:
    api_version: agent-install.openshift.io/v1beta1
    kind: Agent
    namespace: "{{ metadata.name }}"
  register: agents
  until: (agents.resources | length | int) == (worker_count | int)
  retries: 60
  delay: 20

- name: Wait for Agents to become ready
  kubernetes.core.k8s_info:
    api_version: agent-install.openshift.io/v1beta1
    kind: Agent
    namespace: "{{ metadata.name }}"
    wait: true
    wait_condition:
      type: RequirementsMet
      status: "True"
    wait_timeout: 1200
  register: k8s_result
  until: k8s_result is not failed

- name: Create NodePool
  kubernetes.core.k8s:
    template: NodePool.yaml.j2
    apply: true
    state: present
  vars:
    install_manifests_folder: "{{ edgeCluster.installManifestsFolder }}"
  register: k8s_result
  until: k8s_result is not failed
